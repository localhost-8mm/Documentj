
SET A 
1. Write a program that create 2 threads – each displaying a message (Pass the message 
as a parameter to the constructor). The threads should display the messages continuously 
till the user presses ctrl-c. Also display the thread information as it is running. 
:-------------------------
 import java.util.Random;
class MessageThread extends Thread 
{
    private String message; 
    public MessageThread(String message) 
     {
        this.message = message;  
    }

    @Override   
    public void run() 
    {
        while (true)
         {
            System.out.println(Thread.currentThread().getName() + " - " + message);
            try 
            {
                Thread.sleep(2000); // Sleep for 2 second
            } 
            catch (InterruptedException e)
             {
                e.printStackTrace();
            }
        }
    }
}

public class message
{
public static void main(String[] args) 
    {
        
        new MessageThread("Hello from Thread 1").start();
        new MessageThread("Hello from Thread 2").start();
    }
}
=====================================================================================================================
2. Write a java program to calculate the sum and average of an array of 1000 integers 
(generated randomly) using 10 threads. Each thread calculates the sum of 100 integers. 
Use these values to calculate average. [Use join method ] 
:-------------------------

import java.util.Random;

class SumTask extends Thread
 {
    private int[] array;
    private int start, end;
    private long partialSum;

    public SumTask(int[] array, int start, int end) 
    {
        this.array = array;
        this.start = start;
        this.end = end;
    }

    public long getPartialSum() 
    {
        return partialSum;
    }

    //@Override
    public void run() 
    {
        partialSum = 0;
        for (int i = start; i < end; i++)
         {
            partialSum += array[i];
        }
    }
}

public class parrelalsum
{
    public static void main(String[] args) throws InterruptedException
     {
        int[] array = new int[1000];
        Random random = new Random();

        // Fill the array with random integers
        for (int i = 0; i < array.length; i++)
         {
            array[i] = random.nextInt(100); // Random numbers between 0 and 99
        }

        // Create and start 10 threads
        SumTask[] threads = new SumTask[10];
        for (int i = 0; i < 10; i++)
         {
            int start = i * 100;
            int end = start + 100;
            threads[i] = new SumTask(array, start, end);
            threads[i].start();
        }
 
        long totalSum = 0;
        for (SumTask thread : threads)
         {
            thread.join();
            totalSum += thread.getPartialSum();
        }
 
        double average = (double) totalSum / array.length;
 
        System.out.println("Total Sum: " + totalSum);
        System.out.println("Average: " + average);
    }
}

=====================================================================================================================
Set A Extra programs for practice 
1. Define a thread called “PrintText_Thread” for printing text on command prompt for 
 n number of times. Create three threads and run them. Pass the text and n as 
parameters to the thread constructor. Example: 
 i. First thread prints “I am in FY” 10 times 
 ii. Second thread prints “I am in SY” 20 times 
 iii. Third thread prints “I am in TY” 30 times 
:-------------------------
class PrintText_Thread extends Thread 
{
  private String text;
  private int n;

  public PrintText_Thread(String text, int n) 
  {
      this.text = text;
      this.n = n;
  }

  //@Override
  public void run() 
  {
      for (int i = 0; i < n; i++)
       {
          System.out.println(text);
      }
  }
}

public class textprinter
 {
  public static void main(String args[])
   {
      // Create and start three threads
      PrintText_Thread thread1 = new PrintText_Thread("I am in FY", 10); 
      // arguments like parameterized constructor
      PrintText_Thread thread2 = new PrintText_Thread("I am in SY", 20);
      PrintText_Thread thread3 = new PrintText_Thread("I am in TY", 30);

      thread1.start();
      thread2.start();
      thread3.start();
  }
}
=====================================================================================================================
SET B 
1. Write a program for a simple search engine. Accept a string to be searched. Search for 
the string in all text files in the current folder. Use a separate thread for each file. The 
result should display the filename, line number where the string is found. 
:-------------------------
import java.io.*;
import java.util.*;

class FileSearchThread extends Thread 
{
    private File file;
    private String searchString;

    public FileSearchThread(File file, String searchString) 
    {
        this.file = file;
        this.searchString = searchString;
    }

    @Override
    public void run() 
    {
        try (BufferedReader br = new BufferedReader(new FileReader(file)))
         {
            String line;
            int lineNumber = 1;
            while ((line = br.readLine()) != null)
            {
                if (line.contains(searchString))
                 {
                    System.out.println(file.getName() + " - Line " + lineNumber + ": " + line);
                }
                lineNumber++;
            }
        }
         catch (IOException e) 
        {
            System.err.println("Error reading file: " + file.getName());
            e.printStackTrace();
        }
    }
}

public class filesearch {
    public static void main(String[] args) 
    {
        // Accept the search string from the user
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the string to search: ");
        String searchString = scanner.nextLine();

        // Get all .txt files in the current directory
        File folder = new File(".");
        File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".txt"));

        if (files == null || files.length == 0) {
            System.out.println("No text files found in the current folder.");
            return;
        }

        // Create and start a separate thread for each file
        for (File file : files) {
            new FileSearchThread(file, searchString).start();
        }
    }
}

=====================================================================================================================
2. Define a thread to move a ball inside a panel vertically. The Ball should be created 
when user clicks on the Start Button. Each ball should have a different color and vertical 
position (calculated randomly). Note: Suppose user has clicked buttons 5 times then five 
balls should be created and move inside the panel. Ensure that ball is moving within the 
panel border only. 
:-------------------------
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;

// Thread class to move a ball vertically within the panel
class BallThread extends Thread 
{
    private int x;            // Fixed horizontal position (centered)
    private int y;            // Current vertical position
    private final int diameter = 20;
    private int dy = 2;       // Vertical velocity
    private Color color;
    private BallPanel panel;
    
    public BallThread(BallPanel panel, int x, int y, Color color)
     {
        this.panel = panel;
        this.x = x;
        this.y = y;
        this.color = color;
    }
    
    @Override
    public void run()
     {
        while (true)
         {
            y += dy;
            if (y < 0)
             {
                y = 0;
                dy = -dy;
            }
            // Bounce off the bottom boundary
            if (y > panel.getHeight() - diameter) 
            {
                y = panel.getHeight() - diameter;
                dy = -dy;
            }
            panel.repaint();  // Request the panel to repaint with the new position
            try 
            {
                Thread.sleep(20);
            } 
            catch (InterruptedException e)
             {
                break;
            }
        }
    }
    
    // Getters for drawing the ball
    public int getX()
          { 
            return x;
         }
    public int getY() 
         { 
            return y;
        }
    public int getDiameter() 
    {
         return diameter; 
        }
    public Color getColor()
     {
         return color; 
    }
}

// Panel that keeps track of all balls and draws them
class BallPanel extends JPanel
 {
    private ArrayList<BallThread> balls = new ArrayList<>();
    
    public void addBall(BallThread ball)
     {
        balls.add(ball);
        ball.start();
    }
    
    @Override
    protected void paintComponent(Graphics g)
     {
        super.paintComponent(g);
        for (BallThread ball : balls)
         {
            g.setColor(ball.getColor());
            g.fillOval(ball.getX(), ball.getY(), ball.getDiameter(), ball.getDiameter());
        }
    }
}

// Main frame containing the panel and the Start button
public class bouncingballs extends JFrame
 {
    private BallPanel ballPanel;
    private JButton startButton;
    
    public bouncingballs()
     {
        setTitle("Vertical Moving Balls");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        
        ballPanel = new BallPanel();
        ballPanel.setBackground(Color.WHITE);
        add(ballPanel, BorderLayout.CENTER);
        
        startButton = new JButton("Start");
        add(startButton, BorderLayout.SOUTH);
        
        startButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
             {
                // Create a new ball with random vertical position and random color
                Random rand = new Random();
                int panelHeight = ballPanel.getHeight();
                int panelWidth = ballPanel.getWidth();
                // If the panel is not yet visible, use default sizes
                if (panelHeight <= 0)
                 { 
                    panelHeight = 400; 
                 }
                if (panelWidth <= 0) 
                {
                     panelWidth = 400;
                 }
                // For vertical movement, fix the x coordinate to the center
                int x = panelWidth / 2;
                // Random initial y position (ensuring the ball is fully within the panel)
                int y = rand.nextInt(panelHeight - 20);
                // Generate a random color
                Color color = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
                BallThread ball = new BallThread(ballPanel, x, y, color);
                ballPanel.addBall(ball);
            }
        });
    }
    
    public static void main(String[] args)
     {
        SwingUtilities.invokeLater(() ->
         {
            bouncingballs frame = new bouncingballs();
            frame.setVisible(true);
        });
    }
}
=====================================================================================================================
SET C 
1. Write a java program to create a class called FileWatcher that can be given several 
filenames. The class should start a thread for each file name. If the file exists, the thread 
will write a message to the console and then end. If the filw does not exist, the thread will 
check for the existence of its file after every 5 seconds till the file gets created. 
:-------------------------
import java.io.File;

class FileWatcherThread extends Thread 
{
    private String fileName;

    public FileWatcherThread(String fileName) 
    {
        this.fileName = fileName;
    }

    @Override
    public void run()
     {
        File file = new File(fileName);
        while (true)
         {
            if (file.exists()) 
            {
                System.out.println("File " + fileName + " exists.");
                break; // Exit the thread once the file is found
            }
             else
             {
                System.out.println("File " + fileName + " does not exist. Checking again in 3 seconds...");
                try 
                {
                    Thread.sleep(3000); // Wait for 5 seconds before checking again
                }
                 catch (InterruptedException e)
                 {
                    System.err.println("Thread interrupted: " + e.getMessage());
                    break;
                }
            }
        }
    }
}

public class filewatcher
{
    public static void main(String[] args)
     {
        if (args.length == 0)
         {
            System.out.println("Usage: java FileWatcher <file1> <file2> ...");
            return;
        }

        for (String fileName : args) 
        {
            new FileWatcherThread(fileName).start();
        }
    }
}
=====================================================================================================================
2.Write a program to simulate traffic signal using threads.
:-------------------------
class TrafficSignal extends Thread
 {
  private String signalColor;

  public TrafficSignal(String initialColor) 
  {
      this.signalColor = initialColor;
  }

  @Override
  public void run()
   {
      while (true) 
      {
          switch (signalColor)
           {
              case "RED":
                  System.out.println("Signal is RED. Stop!");
                  sleepFor(5000); // Red for 5 seconds
                  signalColor = "GREEN";
                  break;
              case "GREEN":
                  System.out.println("Signal is GREEN. Go!");
                  sleepFor(5000); // Green for 5 seconds
                  signalColor = "YELLOW";
                  break;
              case "YELLOW":
                  System.out.println("Signal is YELLOW. Get Ready!");
                  sleepFor(2000); // Yellow for 2 seconds
                  signalColor = "RED";
                  break;
          }
      }
  }

  private void sleepFor(int milliseconds)
   {
      try 
      {
          Thread.sleep(milliseconds);
      } 
      catch (InterruptedException e)
       {
          System.err.println("Signal interrupted: " + e.getMessage());
      }
  }
}

public class trafficsignal
 {
  public static void main(String[] args) 
  {
      TrafficSignal signal = new TrafficSignal("RED");
      signal.start();
  }
} 
=====================================================================================================================
3. Write a program to show how three thread manipulate same stack , two of them are 
pushing elements on the stack, while the third one is popping elements off the 
stack. 
:-------------------------
import java.util.Stack;

class SharedStack 
{
    private Stack<Integer> stack = new Stack<>();
    private final int CAPACITY = 5;

    public synchronized void push(int value, String threadName) 
    {
        while (stack.size() >= CAPACITY)
         {
            try 
            {
                wait(); // Wait if stack is full
            } 
            catch (InterruptedException e)
             {
                e.printStackTrace();
            }
        }
        stack.push(value);
        System.out.println(threadName + " pushed: " + value);
        notifyAll(); // Notify other threads
    }

    public synchronized int pop() 
    {
        while (stack.isEmpty())
         {
            try {
                wait(); // Wait if stack is empty
            } catch (InterruptedException e)
             {
                e.printStackTrace();
            }
        }
        int value = stack.pop();
        System.out.println("Popper popped: " + value);
        notifyAll(); // Notify other threads
        return value;
    }
}

class Pusher extends Thread 
{
    private SharedStack stack;
    private String threadName;

    public Pusher(SharedStack stack, String name) 
    {
        this.stack = stack;
        this.threadName = name;
    }

    public void run()
     {
        for (int i = 1; i <= 5; i++)
         {
            stack.push(i, threadName);
            try 
            {
                Thread.sleep(500); // Simulating delay
            } 
            catch (InterruptedException e)
             {
                e.printStackTrace();
            }
        }
    }
}


class Popper extends Thread
 {
    private SharedStack stack;

    public Popper(SharedStack stack)
     {
        this.stack = stack;
    }

    public void run() 
    {
        for (int i = 1; i <= 10; i++)
         { // More pops than pushes
            stack.pop();
            try
             {
                Thread.sleep(700); // Simulating delay
            } catch (InterruptedException e) 
            {
                e.printStackTrace();
            }
        }
    }
}

public class stack
 {
    public static void main(String[] args) {
        SharedStack stack = new SharedStack();
        
        Pusher pusher1 = new Pusher(stack, "Pusher1");
        Pusher pusher2 = new Pusher(stack, "Pusher2");
        Popper popper = new Popper(stack);

        pusher1.start();
        pusher2.start();
        popper.start();
    }
}

public class ThreadStackDemo {
    public static void main(String[] args) {
        SharedStack stack = new SharedStack();
        
        Thread pusher1 = new Thread(new Pusher(stack, "Pusher1"));
        Thread pusher2 = new Thread(new Pusher(stack, "Pusher2"));
        Thread popper = new Thread(new Popper(stack));
        
        pusher1.start();
        pusher2.start();
        popper.start();
        
        try {
            pusher1.join();
            pusher2.join();
            popper.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Final stack state: " + stack);
    }
}

=====================================================================================================================
