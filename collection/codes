SET A 
1. Accept ‘n’ integers from the user and store them in a collection. Display them in the 
sorted order. The collection should not accept duplicate elements. (Use a suitable 
collection). Search for an particular element using predefined search method in the 
Collection framework. 
:---------------------
import java.util.Scanner;
import java.util.TreeSet;

public class collection1
{
  public  static void main(String arg[])
  {
      Scanner sc =new Scanner(System.in);

      TreeSet<Integer> x= new TreeSet<>();   // declaring new tree setof integers

      System.out.println("enter the number of elements");
      int n =sc.nextInt();

      System.out.println("enter "+n+" numbers-");
      for(int i=0;i<n;i++ )
        {
          int num=sc.nextInt();
          x.add(num);
        }

      System.out.println("Numbers in sorted order are"+ x);
  //-----------------------------------------------------------------------
      System.out.println("Enter element to search");
      int ele=sc.nextInt();
        if(x.contains(ele))
        {
          System.out.println("Element found");
        }
        else
        {
          System.out.println("Element not found");
        } 
      sc.close();
  }
} 
=========================================================================================================================
2. Construct a linked List containing names of colors: red, blue, yellow and orange. Then 
extend your program to do the following: 
i. Display the contents of the List using an Iterator; 
ii. Display the contents of the List in reverse order using a ListIterator; 
iii. Create another list containing pink and green. Insert the elements of this list 
between blue and yellow. 
:-------------------
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;

public class collection2 
{
    public static void main(String[] args) 
    {
        LinkedList<String> clr = new LinkedList<>();
        clr.add("red");
        clr.add("blue");
        clr.add("yellow");
        clr.add("orange");
 
        System.out.println("List elements by iterator function:");
        Iterator<String> x = clr.iterator(); 

        while (x.hasNext()) 
        {
            String color = x.next();  
            System.out.println(color);
        }
 
        System.out.println("List elements in reverse order by ListIterator:");
        ListIterator<String> y = clr.listIterator(clr.size()); 
        while (y.hasPrevious())
         {
            System.out.println(y.previous());
        }

        LinkedList<String> newColors = new LinkedList<>();
        newColors.add("pink");
        newColors.add("green");
 
        int index = clr.indexOf("blue") + 1; 
        clr.addAll(index, newColors);  

        
        System.out.println("\nFinal list of colors after insertion:");
        for (String color : clr) 
         {
            System.out.println(color);
         }
    }
} 
============================================================================================================================

3. Create a Hash table containing student name and percentage. Display the details of the 
hash table. Also search for a specific student and display percentage of that student. 
:-------------------------------
import java.util.Hashtable;
import java.util.Scanner;

public class collection3
 {
  public static void main(String[] args)
    {
      Hashtable<String,Double> details=new Hashtable<String,Double> ();

      details.put("nilima",85.5);
      details.put("vishal",75.5);
      details.put("omkar",25.5);
      details.put("jaya",35.5); 
      details.put("mila",95.5);

      System.out.println("Student Details:");
        for(String key:details.keySet())
        {
          System.out.println("Name: " + key + "-- Percentage: " + details.get(key));
        }
        
     
        Scanner sc= new Scanner(System.in);
        System.out.print("\nEnter the name of the student to search: ");
        String studentName = sc.nextLine();
        
        if(details.containsKey(studentName))
          {
            double per=details.get(studentName);
            System.out.println("Percentage of "+studentName+ " is " + per);
          }
        else
          {
            System.out.println("student not found");
          }
    }
} 
==================================================================================================================
SET B 
1. Create a java application to store city names and their STD codes using an appropriate 
collection. The GUI ahould allow the following operations: 
 i. Add a new city and its code (No duplicates) 
 ii. Remove a city from the collection 
 iii. Search for a cityname and display the code 
:------------------------
 import java.awt.*;
import java.awt.event.*;
import java.util.Hashtable;
import javax.swing.*;

public class collection4 extends JFrame implements ActionListener
 {
    JTextField txtname, txtstd;
    JButton btnadd, btndelete, btnsearch;
    Hashtable<String, String> table = new Hashtable<>();

    collection4()
     {
        setTitle("City STD Code Information");
        setSize(400, 200);
        setLayout(new GridLayout(3, 2, 10, 10));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        add(new JLabel("Enter City Name:"));
        txtname = new JTextField();
        add(txtname);

        add(new JLabel("Enter STD Code:"));
        txtstd = new JTextField();
        add(txtstd);

        JPanel p1 = new JPanel(new GridLayout(1, 3, 5, 5));
        btnadd = new JButton("Add");
        btnadd.addActionListener(this);
        p1.add(btnadd);
        
        btndelete = new JButton("Delete");
        btndelete.addActionListener(this);
        p1.add(btndelete);
        
        btnsearch = new JButton("Search");
        btnsearch.addActionListener(this);
        p1.add(btnsearch);
        
        add(p1);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent ae)
     {
        String name = txtname.getText().trim();
        String std = txtstd.getText().trim();

        if (ae.getSource() == btnadd)
         {
               if (name.isEmpty() || std.isEmpty() || table.containsKey(name))
               {
                  JOptionPane.showMessageDialog(this, "Invalid input or duplicate entry", "Error", JOptionPane.ERROR_MESSAGE);
               } 
               else 
               {
                  table.put(name, std);
                  JOptionPane.showMessageDialog(this, "Successfully Added", "Success", JOptionPane.INFORMATION_MESSAGE);
                  txtname.setText("");
                  txtstd.setText("");
               }
        } 
        else if (ae.getSource() == btndelete)
         {
            String city = JOptionPane.showInputDialog(this, "Enter City to remove");
            if (table.remove(city) != null) 
            {
                JOptionPane.showMessageDialog(this, "City Removed", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
             else 
             {
                JOptionPane.showMessageDialog(this, "City not found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
        else if (ae.getSource() == btnsearch) 
        {
            String city = JOptionPane.showInputDialog(this, "Enter City");
            String code = table.get(city);
            JOptionPane.showMessageDialog(this, code != null ? "STD Code: " + code : "City not found", "Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public static void main(String[] args)
     {
        new collection4();
    }
}
===================================================================================================================
SET C 
1. Read a text file, specified by the first command line argument, into a list. The 
program should then display a menu which performs the following operations on the list: 
1. Insert line 2. Delete line 3. Append line 4. Modify line 5. Exit 
When the user selects Exit, save the contents of the list to the file and end the program.
:------------------------------
import java.io.*;
import java.util.*;

public class collection5
  {
    public static void main(String[] args) 
       {
        if (args.length < 1)
         {
            System.out.println("Please specify the file name as a command-line argument.");
            return;
        }

        String fileName = args[0];
        List<String> lines = new ArrayList<>();

        // Read the file into the list
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) 
        {
            String line;
            while ((line = reader.readLine()) != null) 
            {
                lines.add(line);
            }
        } catch (IOException e) 
        {
            System.out.println("Error reading file: " + e.getMessage());
        }

        Scanner scanner = new Scanner(System.in);
        boolean exit = false;

        while (!exit)
         {
            // Display menu
            System.out.println("\nMenu:");
            System.out.println("1. Insert line");
            System.out.println("2. Delete line");
            System.out.println("3. Append line");
            System.out.println("4. Modify line");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline

            switch (choice) 
            {
                case 1: // Insert line
                    System.out.print("Enter the line to insert: ");
                    String newLine = scanner.nextLine();
                    System.out.print("Enter the position (1-based index): ");
                    int position = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline

                    if (position > 0 && position <= lines.size() + 1) 
                    {
                        lines.add(position - 1, newLine);
                        System.out.println("Line inserted successfully.");
                    }
                    else
                   {
                        System.out.println("Invalid position.");
                    }
                    break;

                case 2:  
                    System.out.print("Enter the position (1-based index) of the line to delete: ");
                    int deletePosition = scanner.nextInt();
                    scanner.nextLine();  

                    if (deletePosition > 0 && deletePosition <= lines.size()) 
                    {
                        lines.remove(deletePosition - 1);
                        System.out.println("Line deleted successfully.");
                    } 
                    else
                     {
                        System.out.println("Invalid position.");
                    }
                    break;

                case 3:  
                    System.out.print("Enter the line to append: ");
                    String appendLine = scanner.nextLine();
                    lines.add(appendLine);
                    System.out.println("Line appended successfully.");
                    break;

                case 4: 
                    System.out.print("Enter the position (1-based index) of the line to modify: ");
                    int modifyPosition = scanner.nextInt();
                    scanner.nextLine();  

                    if (modifyPosition > 0 && modifyPosition <= lines.size()) 
                    {
                        System.out.print("Enter the new content: ");
                        String modifiedLine = scanner.nextLine();
                        lines.set(modifyPosition - 1, modifiedLine);
                        System.out.println("Line modified successfully.");
                    }
                     else 
                    {
                        System.out.println("Invalid position.");
                    }
                    break;

                case 5: 
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) 
                    {
                        for (String line : lines)
                        {
                            writer.write(line);
                            writer.newLine();
                        }
                        System.out.println("File saved successfully.");
                    } 
                    catch (IOException e) 
                    {
                        System.out.println("Error writing to file: " + e.getMessage());
                    }
                    exit = true;
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }
} 

=====================================================================================================================
